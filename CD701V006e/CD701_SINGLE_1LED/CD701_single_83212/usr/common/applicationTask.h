#ifndef _APPLICATION_H
#define _APPLICATION_H
#include <appConfig.h>
#include <softTimerTask.h>
#include <systick_device.h>
#include <taskManager.h>

#include <ColorMixingTask.h>
#include <lin_device.h>
#include <adc_device.h>
#include <gpio_device.h>
#include <ledParamTables.h>
#include <timer_device.h>
#include <pmu_device.h>
#include <linStackTask.h>

#define LEVEL	   					(0.6)
#define COLOR_MAX					(65535U)
#define W_CX						(0.3333)
#define W_CY						(0.3333)
#define FramePeriod					(50)	//帧周期

#define ColourContrLowerLimit		(0x00)
#define ColourContrUpperLimit		(256)
#define DimLevelLowerLimit			(0x01)
#define DimLevelUpperLimit			(0x65)
#define TimeContrLowerLimit			(0x01)
#define TimeContrUpperLimit			(0x33)
#define FrecyContrLowerLimit		(0x01)
#define FrecyContrUpperLimit		(0x3F)
#define RegContrLowerLimit			(0x01)
#define RegContrUpperLimit			(0x07)

typedef struct
{
	uint32_t RGB;
	float Cx;
	float Cy;
}RGB_xy_t;

static  RGB_xy_t  rgbTable[ColourContrUpperLimit] = {
{0xFFFFFF, 0.3127, 0.3290}, //1
{0xFFF9FA, 0.3159, 0.3281}, //2
{0xFFF3F6, 0.3187, 0.3261}, //3
{0xFFEDF2, 0.3216, 0.3242}, //4
{0xFFE7EE, 0.3247, 0.3222}, //5
{0xFFE1EA, 0.3279, 0.3201}, //6
{0xFFDBE6, 0.3313, 0.3181}, //7
{0xFFD5E2, 0.3348, 0.3160}, //8
{0xFFCCDC, 0.3404, 0.3128}, //9
{0xFFC3D5, 0.3473, 0.3107}, //10
{0xFFBACF, 0.3538, 0.3074}, //11
{0xFFB1C8, 0.3617, 0.3052}, //12
{0xFFAAC4, 0.3668, 0.3020}, //13
{0xFFA4BF, 0.3730, 0.3009}, //14
{0xFF9EBB, 0.3785, 0.2988}, //15
{0xFF94B4, 0.3884, 0.2957}, //16
{0xFF8EB0, 0.3945, 0.2937}, //17
{0xFF88AB, 0.4020, 0.2928}, //18
{0xFF7EA4, 0.4135, 0.2901}, //19
{0xFF749D, 0.4258, 0.2876}, //20
{0xFF6D98, 0.4349, 0.2862}, //21
{0xFF6693, 0.4443, 0.2849}, //22
{0xFF6390, 0.4495, 0.2853}, //23
{0xFF5C8B, 0.4594, 0.2843}, //24
{0xFF5888, 0.4653, 0.2840}, //25
{0xFF5183, 0.4754, 0.2835}, //26
{0xFF4E80, 0.4811, 0.2841}, //27
{0xFF467A, 0.4934, 0.2842}, //28
{0xFF4378, 0.4976, 0.2842}, //29
{0xFE3B72, 0.5091, 0.2845}, //30
{0xFA376F, 0.5120, 0.2838}, //31
{0xF23069, 0.5175, 0.2832}, //32
{0xF22F68, 0.5195, 0.2836}, //33
{0xF23368, 0.5179, 0.2859}, //34
{0xF33768, 0.5171, 0.2886}, //35
{0xF43A67, 0.5181, 0.2918}, //36
{0xF64066, 0.5184, 0.2973}, //37
{0xF64365, 0.5183, 0.3004}, //38
{0xF74664, 0.5190, 0.3037}, //39
{0xF74963, 0.5187, 0.3069}, //40
{0xF84C63, 0.5178, 0.3094}, //41
{0xF94E62, 0.5187, 0.3121}, //42
{0xF95161, 0.5182, 0.3155}, //43
{0xF95460, 0.5176, 0.3189}, //44
{0xFA565E, 0.5197, 0.3225}, //45
{0xFA595D, 0.5189, 0.3260}, //46
{0xFA5B5C, 0.5187, 0.3287}, //47
{0xFB5E5B, 0.5185, 0.3323}, //48
{0xFB6059, 0.5194, 0.3359}, //49
{0xFB6358, 0.5183, 0.3395}, //50
{0xFB6556, 0.5190, 0.3431}, //51
{0xFB6755, 0.5185, 0.3458}, //52
{0xFC6A53, 0.5189, 0.3502}, //53
{0xFC6C51, 0.5193, 0.3538}, //54
{0xFC6E4F, 0.5196, 0.3573}, //55
{0xFC704D, 0.5198, 0.3608}, //56
{0xFC734B, 0.5189, 0.3653}, //57
{0xFC7548, 0.5198, 0.3694}, //58
{0xFB7746, 0.5189, 0.3731}, //59
{0xFB7943, 0.5195, 0.3772}, //60
{0xFB7B40, 0.5199, 0.3812}, //61
{0xFB7D3D, 0.5201, 0.3851}, //62
{0xFB7F3A, 0.5202, 0.3889}, //63
{0xFA8136, 0.5200, 0.3936}, //64
{0xFA8332, 0.5203, 0.3978}, //65
{0xFA8829, 0.5195, 0.4069}, //66
{0xFA8728, 0.5210, 0.4064}, //67
{0xFC8B29, 0.5176, 0.4089}, //68
{0xFF8F29, 0.5155, 0.4113}, //69
{0xFF9329, 0.5111, 0.4151}, //70
{0xFF9729, 0.5069, 0.4188}, //71
{0xFF9B29, 0.5026, 0.4226}, //72
{0xFF9E29, 0.4994, 0.4253}, //73
{0xFFA229, 0.4953, 0.4290}, //74
{0xFFA629, 0.4911, 0.4326}, //75
{0xFFA929, 0.4880, 0.4353}, //76
{0xFFAD28, 0.4843, 0.4392}, //77
{0xFFB128, 0.4803, 0.4427}, //78
{0xFFB428, 0.4774, 0.4453}, //79
{0xFFB827, 0.4737, 0.4491}, //80
{0xFFBB27, 0.4708, 0.4516}, //81
{0xFFBF26, 0.4673, 0.4552}, //82
{0xFFC225, 0.4648, 0.4580}, //83
{0xFFC625, 0.4611, 0.4612}, //84
{0xFFC924, 0.4586, 0.4638}, //85
{0xFFCD23, 0.4552, 0.4672}, //86
{0xFFD022, 0.4528, 0.4697}, //87
{0xFFD421, 0.4495, 0.4730}, //88
{0xFFD720, 0.4471, 0.4754}, //89
{0xFFDA1F, 0.4448, 0.4778}, //90
{0xFFDE1D, 0.4418, 0.4811}, //91
{0xFFE11C, 0.4395, 0.4833}, //92
{0xFFE41A, 0.4374, 0.4857}, //93
{0xFFE818, 0.4345, 0.4887}, //94
{0xFFEE13, 0.4304, 0.4934}, //95
{0xFEEF49, 0.4174, 0.4766}, //96
{0xFEF065, 0.4056, 0.4599}, //97
{0xFEF17A, 0.3948, 0.4444}, //98
{0xFDF38D, 0.3827, 0.4299}, //99
{0xFDF49E, 0.3723, 0.4148}, //100
{0xFCF5AD, 0.3622, 0.4013}, //101
{0xFCF7BC, 0.3523, 0.3881}, //102
{0xF8FD01, 0.4158, 0.5079}, //103
{0xF0FC02, 0.4108, 0.5118}, //104
{0xE9FA03, 0.4071, 0.5145}, //105
{0xE2F904, 0.4027, 0.5179}, //106
{0xDBF705, 0.3989, 0.5207}, //107
{0xD4F506, 0.3950, 0.5236}, //108
{0xCCF407, 0.3897, 0.5276}, //109
{0xC5F208, 0.3858, 0.5305}, //110
{0xBEF009, 0.3818, 0.5335}, //111
{0xB6EE09, 0.3771, 0.5372}, //112
{0xAEEC0A, 0.3722, 0.5408}, //113
{0xA6E90A, 0.3680, 0.5440}, //114
{0x97E50C, 0.3590, 0.5506}, //115
{0x97E50B, 0.3591, 0.5508}, //116
{0x96E429, 0.3547, 0.5412}, //117
{0x95E439, 0.3501, 0.5325}, //118
{0x94E445, 0.3456, 0.5240}, //119
{0x93E44F, 0.3413, 0.5158}, //120
{0x92E458, 0.3370, 0.5076}, //121
{0x91E460, 0.3328, 0.4996}, //122
{0x90E467, 0.3289, 0.4922}, //123
{0x90E36E, 0.3257, 0.4832}, //124
{0x8FE375, 0.3215, 0.4750}, //125
{0x8EE37B, 0.3177, 0.4677}, //126
{0x8DE381, 0.3139, 0.4602}, //127
{0x8CE386, 0.3105, 0.4538}, //128
{0x8BE38B, 0.3072, 0.4473}, //129
{0x8AE391, 0.3032, 0.4393}, //130
{0x89E295, 0.3004, 0.4329}, //131
{0x88E29A, 0.2970, 0.4261}, //132
{0x86E29F, 0.2930, 0.4194}, //133
{0x85E2A4, 0.2896, 0.4125}, //134
{0x84E2A8, 0.2868, 0.4070}, //135
{0x83E2AC, 0.2840, 0.4015}, //136
{0x82E1B1, 0.2806, 0.3934}, //137
{0x81E1B5, 0.2779, 0.3878}, //138
{0x7FE1B9, 0.2746, 0.3824}, //139
{0x7EE1BD, 0.2720, 0.3768}, //140
{0x7DE1C1, 0.2693, 0.3713}, //141
{0x7BE1C5, 0.2662, 0.3659}, //142
{0x7AE1C9, 0.2636, 0.3605}, //143
{0x78E0CC, 0.2609, 0.3552}, //144
{0x77E0D0, 0.2584, 0.3498}, //145
{0x75E0D4, 0.2555, 0.3445}, //146
{0x74E0D8, 0.2531, 0.3392}, //147
{0x72E0DB, 0.2508, 0.3353}, //148
{0x71DFDF, 0.2482, 0.3288}, //149
{0x6FDFE2, 0.2460, 0.3250}, //150
{0x6DDFE6, 0.2434, 0.3199}, //151
{0x6BDFEA, 0.2408, 0.3148}, //152
{0x68DFF1, 0.2367, 0.3062}, //153
{0x68DFF0, 0.2371, 0.3074}, //154
{0x65DCF2, 0.2343, 0.3010}, //155
{0x63DAF3, 0.2326, 0.2972}, //156
{0x61D8F4, 0.2309, 0.2933}, //157
{0x5FD6F5, 0.2292, 0.2894}, //158
{0x5DD3F6, 0.2272, 0.2841}, //159
{0x5BD1F7, 0.2255, 0.2802}, //160
{0x58CFF7, 0.2239, 0.2774}, //161
{0x56CCF8, 0.2220, 0.2721}, //162
{0x54CAF8, 0.2207, 0.2692}, //163
{0x51C7F9, 0.2184, 0.2639}, //164
{0x4FC5F9, 0.2171, 0.2610}, //165
{0x4DC2F9, 0.2155, 0.2567}, //166
{0x4AC0F9, 0.2139, 0.2538}, //167
{0x48BDF9, 0.2123, 0.2495}, //168
{0x45BBF9, 0.2108, 0.2465}, //169
{0x43B8F9, 0.2092, 0.2422}, //170
{0x40B5F8, 0.2077, 0.2388}, //171
{0x3DB3F8, 0.2062, 0.2358}, //172
{0x3AB0F7, 0.2047, 0.2324}, //173
{0x38ADF7, 0.2031, 0.2279}, //174
{0x35AAF6, 0.2016, 0.2245}, //175
{0x2FA5F3, 0.1994, 0.2199}, //176
{0x299FF1, 0.1964, 0.2128}, //177
{0x299FF0, 0.1968, 0.2138}, //178
{0x2C9DF1, 0.1962, 0.2100}, //179
{0x2F9BF2, 0.1958, 0.2062}, //180
{0x329AF3, 0.1957, 0.2039}, //181
{0x3498F4, 0.1951, 0.2001}, //182
{0x3796F5, 0.1948, 0.1965}, //183
{0x3995F5, 0.1950, 0.1952}, //184
{0x3B93F6, 0.1944, 0.1916}, //185
{0x3D91F7, 0.1940, 0.1881}, //186
{0x3F90F7, 0.1942, 0.1868}, //187
{0x418EF8, 0.1938, 0.1834}, //188
{0x438CF9, 0.1934, 0.1800}, //189
{0x4689FA, 0.1931, 0.1754}, //190
{0x4787FA, 0.1927, 0.1728}, //191
{0x4985FB, 0.1925, 0.1696}, //192
{0x4A83FB, 0.1922, 0.1671}, //193
{0x4B82FB, 0.1922, 0.1659}, //194
{0x4D80FC, 0.1920, 0.1629}, //195
{0x4E7EFC, 0.1918, 0.1604}, //196
{0x4F7CFC, 0.1916, 0.1581}, //197
{0x507AFC, 0.1913, 0.1557}, //198
{0x5178FD, 0.1908, 0.1527}, //199
{0x5276FD, 0.1907, 0.1504}, //200
{0x5374FD, 0.1905, 0.1482}, //201
{0x5472FD, 0.1904, 0.1460}, //202
{0x5570FD, 0.1902, 0.1438}, //203
{0x566EFD, 0.1901, 0.1416}, //204
{0x566CFD, 0.1896, 0.1393}, //205
{0x576AFC, 0.1898, 0.1379}, //206
{0x5966FC, 0.1897, 0.1338}, //207
{0x5963FC, 0.1889, 0.1306}, //208
{0x5A61FB, 0.1892, 0.1292}, //209
{0x5A5FFB, 0.1887, 0.1271}, //210
{0x5B5DFA, 0.1890, 0.1258}, //211
{0x5B5AFA, 0.1883, 0.1227}, //212
{0x5B58F9, 0.1882, 0.1212}, //213
{0x5C53F8, 0.1879, 0.1171}, //214
{0x5C51F7, 0.1877, 0.1157}, //215
{0x5C4EF6, 0.1874, 0.1133}, //216
{0x5C4CF5, 0.1873, 0.1120}, //217
{0x5D49F4, 0.1875, 0.1100}, //218
{0x5D44F2, 0.1872, 0.1066}, //219
{0x6444F2, 0.1915, 0.1087}, //220
{0x6B44F3, 0.1957, 0.1106}, //221
{0x7145F4, 0.1996, 0.1130}, //222
{0x7845F5, 0.2042, 0.1150}, //223
{0x7E46F5, 0.2088, 0.1180}, //224
{0x8346F5, 0.2127, 0.1199}, //225
{0x8946F6, 0.2170, 0.1218}, //226
{0x8F46F6, 0.2219, 0.1242}, //227
{0x9447F6, 0.2262, 0.1270}, //228
{0x9947F5, 0.2311, 0.1296}, //229
{0x9E47F5, 0.2355, 0.1318}, //230
{0xA347F5, 0.2400, 0.1340}, //231
{0xA847F5, 0.2446, 0.1362}, //232
{0xB248F3, 0.2555, 0.1426}, //233
{0xB44CF5, 0.2562, 0.1451}, //234
{0xB651F5, 0.2584, 0.1497}, //235
{0xB856F6, 0.2599, 0.1537}, //236
{0xBC5FF6, 0.2642, 0.1627}, //237
{0xBD63F7, 0.2647, 0.1658}, //238
{0xBF68F8, 0.2661, 0.1703}, //239
{0xC06DF8, 0.2674, 0.1751}, //240
{0xC272F9, 0.2688, 0.1798}, //241
{0xC376F9, 0.2699, 0.1839}, //242
{0xC47BF8, 0.2719, 0.1899}, //243
{0xC57FF8, 0.2730, 0.1942}, //244
{0xC787F6, 0.2767, 0.2046}, //245
{0xC88BF5, 0.2785, 0.2099}, //246
{0xC993F3, 0.2813, 0.2206}, //247
{0xC997F1, 0.2829, 0.2268}, //248
{0xCA9BEF, 0.2854, 0.2333}, //249
{0xCBA3EB, 0.2895, 0.2465}, //250
{0xD2ADF1, 0.2911, 0.2533}, //251
{0xDAB8F5, 0.2947, 0.2629}, //252
{0xDEBFF7, 0.2965, 0.2692}, //253
{0xE6CFF7, 0.3023, 0.2873}, //254
{0xFF0D0D, 0.6340, 0.3300}, //255
{0xAA6A4C, 0.4449, 0.3742}, //256
};


static  uint8_t  FidTable[10] = {
				/*低低低低低低低低配*/    /*高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高高配*/
{0x01},   //0	前门板氛围灯总成Ⅰ（左）    前门板氛围灯总成Ⅰ（左）    前门板氛围灯总成Ⅱ（左）
{0x11},   //1	前门板氛围灯总成Ⅰ（右）    前门板氛围灯总成Ⅰ（右）    前门板氛围灯总成Ⅱ（右）
{0x02},   //2	后门板氛围灯总成Ⅰ（左）    后门板氛围灯总成Ⅰ（左）    后门板氛围灯总成Ⅱ（左）
{0x12},   //3	后门板氛围灯总成Ⅰ（右）    后门板氛围灯总成Ⅰ（右）    后门板氛围灯总成Ⅱ（右）

{0x05},   //4	仪表板氛围灯总成Ⅰ          仪表板氛围灯总成Ⅰ
{0x16},   //5   仪表板氛围灯总成Ⅱ         仪表板氛围灯总成Ⅱ
{0x15},   //6	/                         仪表板氛围灯总成Ⅲ         仪表板氛围灯总成Ⅳ           前排座椅氛围灯总成（左）    前排座椅氛围灯总成（右）

{0x25},   //7	仪表板氛围灯总成Ⅰ          仪表板氛围灯总成Ⅰ
{0x35},   //8	仪表板氛围灯总成Ⅰ          仪表板氛围灯总成Ⅰ
{0x26},   //9   仪表板氛围灯总成Ⅱ         仪表板氛围灯总成Ⅱ
};

#define CD701_ZJD		(0)
#define E12_LED2		(1)

#define PCBAType        CD701_ZJD

//#define VE_2_AQ_4_TG_P		//蓝(鸿利)
//#define VE_2_AR_5_TG_P        //橙(鸿利)



typedef struct {
	float x;
	float y;
}xy_shift_t;


#ifdef VE_2_AR_5_TG_P        //橙(鸿利)
	#if(PCBAType == CD701_ZJD)
		#define xy_shift_defined
		static const xy_shift_t xy_shift[ColourContrUpperLimit] ={
			[0]={0.014,0.004},
			[1]={0.015,0.0039},
			[2]={0.0157,0.0037},
			[3]={0.0162,0.0034},
			[4]={0.0168,0.0036},
			[5]={0.0171,0.0036},
			[6]={0.0174,0.0034},
			[7]={0.0177,0.0039},
			[8]={0.018,0.0036},
			[9]={0.0181,0.0037},
			[10]={0.0183,0.004},
			[11]={0.0182,0.0039},
			[12]={0.0184,0.0041},
			[13]={0.0182,0.0043},
			[14]={0.018,0.0043},
			[15]={0.0179,0.0044},
			[16]={0.0179,0.0044},
			[17]={0.0174,0.0044},
			[18]={0.0174,0.0045},
			[19]={0.0169,0.0046},
			[20]={0.0164,0.0046},
			[21]={0.016,0.0047},
			[22]={0.0155,0.0046},
			[23]={0.0149,0.0045},
			[24]={0.0145,0.0044},
			[25]={0.014,0.0043},
			[26]={0.0134,0.0042},
			[27]={0.0128,0.0042},
			[28]={0.0124,0.004},
			[29]={0.0118,0.0039},
			[30]={0.0115,0.0038},
			[31]={0.0111,0.0038},
			[32]={0.0108,0.0037},
			[33]={0.0107,0.0037},
			[34]={0.0106,0.0035},
			[35]={0.0106,0.0035},
			[36]={0.0102,0.0029},
			[37]={0.0101,0.0028},
			[38]={0.0097,0.0027},
			[39]={0.0097,0.0025},
			[40]={0.0097,0.0026},
			[41]={0.0096,0.0022},
			[42]={0.0095,0.0019},
			[43]={0.0094,0.0019},
			[44]={0.009,0.0017},
			[45]={0.0093,0.0016},
			[46]={0.0093,0.0014},
			[47]={0.009,0.0012},
			[48]={0.0092,0.001},
			[49]={0.0092,0.0007},
			[50]={0.0089,0.0005},
			[51]={0.0089,0.0004},
			[52]={0.0086,0.0002},
			[53]={0.0085,0},
			[54]={0.0085,-0.0003},
			[55]={0.0081,-0.0005},
			[56]={0.0083,-0.0006},
			[57]={0.0082,-0.0009},
			[58]={0.0083,-0.0012},
			[59]={0.0081,-0.0015},
			[60]={0.0081,-0.0016},
			[61]={0.008,-0.0018},
			[62]={0.008,-0.0021},
			[63]={0.0078,-0.0022},
			[64]={0.0079,-0.0024},
			[65]={0.0078,-0.003},
			[66]={0.008,-0.0031},
			[67]={0.008,-0.003},
			[68]={0.0081,-0.0032},
			[69]={0.0081,-0.0032},
			[70]={0.0081,-0.0036},
			[71]={0.0083,-0.0036},
			[72]={0.0085,-0.0038},
			[73]={0.0085,-0.0039},
			[74]={0.0087,-0.004},
			[75]={0.0089,-0.0038},
			[76]={0.0091,-0.0043},
			[77]={0.0092,-0.0042},
			[78]={0.0093,-0.0045},
			[79]={0.0094,-0.0048},
			[80]={0.0098,-0.0049},
			[81]={0.0097,-0.0048},
			[82]={0.01,-0.0052},
			[83]={0.01,-0.0054},
			[84]={0.0101,-0.0054},
			[85]={0.0103,-0.0056},
			[86]={0.0105,-0.0056},
			[87]={0.0104,-0.0058},
			[88]={0.0106,-0.006},
			[89]={0.0106,-0.0061},
			[90]={0.0109,-0.0063},
			[91]={0.011,-0.0062},
			[92]={0.011,-0.0063},
			[93]={0.0112,-0.0065},
			[94]={0.0114,-0.0066},
			[95]={0.0118,-0.0052},
			[96]={0.0127,-0.004},
			[97]={0.0133,-0.0028},
			[98]={0.014,-0.0015},
			[99]={0.0144,-0.0004},
			[100]={0.0149,0.0003},
			[101]={0.0154,0.0011},
			[102]={0.0128,-0.0079},
			[103]={0.0127,-0.008},
			[104]={0.0126,-0.0076},
			[105]={0.0126,-0.0079},
			[106]={0.0127,-0.0078},
			[107]={0.0127,-0.0079},
			[108]={0.0125,-0.0077},
			[109]={0.0123,-0.0077},
			[110]={0.012,-0.0075},
			[111]={0.012,-0.0073},
			[112]={0.0117,-0.0069},
			[113]={0.0113,-0.0067},
			[114]={0.0108,-0.0065},
			[115]={0.0106,-0.0062},
			[116]={0.0107,-0.0056},
			[117]={0.0108,-0.0051},
			[118]={0.011,-0.0042},
			[119]={0.0109,-0.0038},
			[120]={0.0111,-0.0031},
			[121]={0.0114,-0.0024},
			[122]={0.0115,-0.002},
			[123]={0.0117,-0.0016},
			[124]={0.0118,-0.0011},
			[125]={0.0119,-0.0005},
			[126]={0.0121,-0.0001},
			[127]={0.0121,0.0002},
			[128]={0.0121,0.0003},
			[129]={0.0124,0.001},
			[130]={0.0124,0.0011},
			[131]={0.0124,0.0016},
			[132]={0.0125,0.0021},
			[133]={0.0125,0.0019},
			[134]={0.0126,0.0024},
			[135]={0.0128,0.0023},
			[136]={0.0128,0.0027},
			[137]={0.0128,0.0029},
			[138]={0.0129,0.0031},
			[139]={0.0129,0.0032},
			[140]={0.013,0.0034},
			[141]={0.0129,0.0036},
			[142]={0.0128,0.0033},
			[143]={0.0129,0.0035},
			[144]={0.0129,0.0037},
			[145]={0.0129,0.0036},
			[146]={0.0129,0.004},
			[147]={0.0129,0.0038},
			[148]={0.0129,0.0039},
			[149]={0.0129,0.0039},
			[150]={0.0128,0.0039},
			[151]={0.0128,0.0039},
			[152]={0.0126,0.0039},
			[153]={0.0128,0.0039},
			[154]={0.0127,0.0038},
			[155]={0.0128,0.0039},
			[156]={0.0128,0.0039},
			[157]={0.0127,0.0038},
			[158]={0.0128,0.0039},
			[159]={0.0128,0.0036},
			[160]={0.0128,0.0036},
			[161]={0.0128,0.0036},
			[162]={0.0126,0.0035},
			[163]={0.0126,0.0033},
			[164]={0.0125,0.0036},
			[165]={0.0125,0.0036},
			[166]={0.0122,0.0036},
			[167]={0.0121,0.0035},
			[168]={0.0119,0.0037},
			[169]={0.0118,0.0037},
			[170]={0.0115,0.0037},
			[171]={0.0114,0.0039},
			[172]={0.0111,0.0039},
			[173]={0.011,0.0039},
			[174]={0.0109,0.004},
			[175]={0.0106,0.0041},
			[176]={0.0103,0.004},
			[177]={0.0102,0.0041},
			[178]={0.0103,0.0041},
			[179]={0.0102,0.0042},
			[180]={0.0102,0.0044},
			[181]={0.0102,0.0044},
			[182]={0.0102,0.0045},
			[183]={0.0101,0.0045},
			[184]={0.0101,0.0045},
			[185]={0.01,0.0045},
			[186]={0.0101,0.0046},
			[187]={0.01,0.0045},
			[188]={0.0101,0.0046},
			[189]={0.01,0.0046},
			[190]={0.01,0.0046},
			[191]={0.0099,0.0046},
			[192]={0.0099,0.0046},
			[193]={0.01,0.0048},
			[194]={0.01,0.0047},
			[195]={0.0098,0.0047},
			[196]={0.0098,0.0047},
			[197]={0.0098,0.0047},
			[198]={0.0098,0.0046},
			[199]={0.0098,0.0047},
			[200]={0.0098,0.0047},
			[201]={0.0098,0.0048},
			[202]={0.0098,0.0048},
			[203]={0.0097,0.0047},
			[204]={0.0096,0.0048},
			[205]={0.0097,0.0047},
			[206]={0.0097,0.0046},
			[207]={0.0097,0.0047},
			[208]={0.0096,0.0047},
			[209]={0.0096,0.0046},
			[210]={0.0096,0.0047},
			[211]={0.0096,0.0047},
			[212]={0.0096,0.0047},
			[213]={0.0095,0.0046},
			[214]={0.0095,0.0046},
			[215]={0.0094,0.0046},
			[216]={0.0095,0.0046},
			[217]={0.0096,0.0047},
			[218]={0.0095,0.0046},
			[219]={0.0098,0.0047},
			[220]={0.01,0.0048},
			[221]={0.0104,0.0049},
			[222]={0.0107,0.0051},
			[223]={0.0111,0.0053},
			[224]={0.0113,0.0053},
			[225]={0.0117,0.0054},
			[226]={0.0122,0.0055},
			[227]={0.0125,0.0057},
			[228]={0.0131,0.0059},
			[229]={0.0135,0.006},
			[230]={0.014,0.0061},
			[231]={0.0145,0.0064},
			[232]={0.0154,0.0067},
			[233]={0.0158,0.0067},
			[234]={0.0161,0.0067},
			[235]={0.0164,0.0067},
			[236]={0.0169,0.0068},
			[237]={0.0171,0.0067},
			[238]={0.0174,0.0067},
			[239]={0.0176,0.0066},
			[240]={0.018,0.0066},
			[241]={0.0184,0.0066},
			[242]={0.0185,0.0066},
			[243]={0.0187,0.0065},
			[244]={0.019,0.0065},
			[245]={0.0192,0.0065},
			[246]={0.0193,0.0062},
			[247]={0.0194,0.0063},
			[248]={0.0194,0.006},
			[249]={0.0194,0.0059},
			[250]={0.0195,0.0058},
			[251]={0.0195,0.0055},
			[252]={0.0195,0.0054},
			[253]={0.0194,0.005},
			[254]={0.0069,-0.0014},
			[255]={0.0179,-0.001},
		};
	#elif(PCBAType == E12_LED2)
		#define xy_shift_defined
		static const xy_shift_t xy_shift[ColourContrUpperLimit] ={
			[0]={0.0065,-0.005},
			[1]={0.0085,-0.0057},
			[2]={0.0103,-0.0057},
			[3]={0.0118,-0.0059},
			[4]={0.0129,-0.006},
			[5]={0.0137,-0.0062},
			[6]={0.0147,-0.0058},
			[7]={0.0155,-0.0058},
			[8]={0.0161,-0.0057},
			[9]={0.0165,-0.0055},
			[10]={0.0169,-0.0053},
			[11]={0.0171,-0.005},
			[12]={0.0173,-0.0045},
			[13]={0.0174,-0.0044},
			[14]={0.0171,-0.0041},
			[15]={0.0174,-0.0038},
			[16]={0.0171,-0.0032},
			[17]={0.017,-0.0032},
			[18]={0.0166,-0.0027},
			[19]={0.0162,-0.0022},
			[20]={0.0156,-0.0021},
			[21]={0.015,-0.0017},
			[22]={0.0148,-0.0017},
			[23]={0.0141,-0.0012},
			[24]={0.0138,-0.0011},
			[25]={0.013,-0.0009},
			[26]={0.0128,-0.0006},
			[27]={0.0121,-0.0007},
			[28]={0.0116,-0.0008},
			[29]={0.0109,-0.0005},
			[30]={0.0104,-0.0005},
			[31]={0.01,-0.0003},
			[32]={0.0099,-0.0002},
			[33]={0.0096,-0.0005},
			[34]={0.0098,-0.0008},
			[35]={0.0098,-0.001},
			[36]={0.0097,-0.0015},
			[37]={0.0097,-0.0018},
			[38]={0.0097,-0.0019},
			[39]={0.0099,-0.0022},
			[40]={0.0098,-0.0026},
			[41]={0.0097,-0.0028},
			[42]={0.0099,-0.0031},
			[43]={0.0098,-0.0034},
			[44]={0.0098,-0.0039},
			[45]={0.0099,-0.0039},
			[46]={0.0101,-0.0041},
			[47]={0.0103,-0.0043},
			[48]={0.0102,-0.0048},
			[49]={0.0104,-0.005},
			[50]={0.0104,-0.0054},
			[51]={0.0107,-0.0056},
			[52]={0.0104,-0.006},
			[53]={0.0105,-0.0062},
			[54]={0.0108,-0.0064},
			[55]={0.0108,-0.0067},
			[56]={0.0111,-0.0071},
			[57]={0.0112,-0.0075},
			[58]={0.0112,-0.0078},
			[59]={0.0113,-0.0081},
			[60]={0.0117,-0.0083},
			[61]={0.012,-0.0085},
			[62]={0.012,-0.0086},
			[63]={0.012,-0.0093},
			[64]={0.0123,-0.0098},
			[65]={0.0123,-0.0101},
			[66]={0.0126,-0.0101},
			[67]={0.0127,-0.0101},
			[68]={0.0128,-0.0105},
			[69]={0.013,-0.0108},
			[70]={0.0134,-0.0111},
			[71]={0.0138,-0.0116},
			[72]={0.0141,-0.0117},
			[73]={0.0143,-0.0119},
			[74]={0.0144,-0.012},
			[75]={0.0148,-0.0122},
			[76]={0.0149,-0.0124},
			[77]={0.0152,-0.0129},
			[78]={0.0154,-0.0129},
			[79]={0.0158,-0.0131},
			[80]={0.0161,-0.0135},
			[81]={0.016,-0.0139},
			[82]={0.0163,-0.014},
			[83]={0.0166,-0.0143},
			[84]={0.0167,-0.0143},
			[85]={0.017,-0.0147},
			[86]={0.0171,-0.0148},
			[87]={0.0175,-0.0152},
			[88]={0.0177,-0.015},
			[89]={0.0179,-0.0155},
			[90]={0.018,-0.0154},
			[91]={0.018,-0.0156},
			[92]={0.0182,-0.0158},
			[93]={0.0185,-0.0162},
			[94]={0.0185,-0.0163},
			[95]={0.0183,-0.0154},
			[96]={0.0184,-0.0142},
			[97]={0.0182,-0.0133},
			[98]={0.0181,-0.0124},
			[99]={0.018,-0.0116},
			[100]={0.018,-0.0107},
			[101]={0.0178,-0.0098},
			[102]={0.0205,-0.0181},
			[103]={0.0202,-0.018},
			[104]={0.0201,-0.0177},
			[105]={0.02,-0.0178},
			[106]={0.0198,-0.0176},
			[107]={0.0196,-0.0175},
			[108]={0.0193,-0.0173},
			[109]={0.0189,-0.0172},
			[110]={0.0185,-0.0171},
			[111]={0.0184,-0.0168},
			[112]={0.0176,-0.0163},
			[113]={0.0172,-0.0159},
			[114]={0.0166,-0.0156},
			[115]={0.0164,-0.0155},
			[116]={0.016,-0.0152},
			[117]={0.0155,-0.0148},
			[118]={0.0151,-0.0144},
			[119]={0.0149,-0.0137},
			[120]={0.0148,-0.0136},
			[121]={0.0145,-0.013},
			[122]={0.0141,-0.0128},
			[123]={0.0143,-0.0122},
			[124]={0.014,-0.0119},
			[125]={0.0141,-0.0117},
			[126]={0.0139,-0.0112},
			[127]={0.0135,-0.011},
			[128]={0.0135,-0.0108},
			[129]={0.0134,-0.0103},
			[130]={0.0132,-0.0104},
			[131]={0.0132,-0.0101},
			[132]={0.013,-0.0099},
			[133]={0.0131,-0.0094},
			[134]={0.0126,-0.0094},
			[135]={0.0128,-0.0093},
			[136]={0.0126,-0.0088},
			[137]={0.0123,-0.0088},
			[138]={0.0121,-0.0086},
			[139]={0.0121,-0.0087},
			[140]={0.0121,-0.0085},
			[141]={0.0118,-0.0081},
			[142]={0.0119,-0.0083},
			[143]={0.0117,-0.0081},
			[144]={0.0115,-0.008},
			[145]={0.0114,-0.0078},
			[146]={0.0113,-0.0077},
			[147]={0.0112,-0.0074},
			[148]={0.0112,-0.0073},
			[149]={0.0112,-0.0074},
			[150]={0.0108,-0.007},
			[151]={0.0108,-0.0068},
			[152]={0.0104,-0.0069},
			[153]={0.0104,-0.0069},
			[154]={0.0105,-0.007},
			[155]={0.0104,-0.0068},
			[156]={0.0105,-0.0068},
			[157]={0.0103,-0.0071},
			[158]={0.0102,-0.0068},
			[159]={0.0103,-0.0067},
			[160]={0.01,-0.0066},
			[161]={0.0101,-0.0065},
			[162]={0.0101,-0.0066},
			[163]={0.01,-0.0066},
			[164]={0.01,-0.0062},
			[165]={0.0101,-0.0064},
			[166]={0.0098,-0.0066},
			[167]={0.0098,-0.0062},
			[168]={0.0095,-0.0064},
			[169]={0.0097,-0.0061},
			[170]={0.0094,-0.0062},
			[171]={0.009,-0.0063},
			[172]={0.0089,-0.0061},
			[173]={0.0086,-0.0058},
			[174]={0.0084,-0.006},
			[175]={0.0082,-0.0057},
			[176]={0.0077,-0.0053},
			[177]={0.0076,-0.0052},
			[178]={0.0075,-0.0052},
			[179]={0.0074,-0.0049},
			[180]={0.0073,-0.0049},
			[181]={0.0074,-0.0045},
			[182]={0.0073,-0.0044},
			[183]={0.0072,-0.0041},
			[184]={0.0072,-0.0039},
			[185]={0.0071,-0.0038},
			[186]={0.0071,-0.0036},
			[187]={0.0069,-0.0034},
			[188]={0.0069,-0.0034},
			[189]={0.0069,-0.0032},
			[190]={0.0068,-0.003},
			[191]={0.0066,-0.0027},
			[192]={0.0066,-0.0027},
			[193]={0.0067,-0.0025},
			[194]={0.0066,-0.0023},
			[195]={0.0064,-0.0023},
			[196]={0.0064,-0.002},
			[197]={0.0064,-0.0018},
			[198]={0.0063,-0.0017},
			[199]={0.0062,-0.0016},
			[200]={0.0062,-0.0015},
			[201]={0.0061,-0.0013},
			[202]={0.0061,-0.0012},
			[203]={0.006,-0.001},
			[204]={0.006,-0.0009},
			[205]={0.0059,-0.0009},
			[206]={0.0058,-0.0006},
			[207]={0.0058,-0.0005},
			[208]={0.0058,-0.0003},
			[209]={0.0057,-0.0003},
			[210]={0.0058,-0.0001},
			[211]={0.0056,0},
			[212]={0.0055,0.0001},
			[213]={0.0055,0.0003},
			[214]={0.0054,0.0003},
			[215]={0.0053,0.0005},
			[216]={0.0053,0.0006},
			[217]={0.0054,0.0008},
			[218]={0.0052,0.0009},
			[219]={0.0056,0.001},
			[220]={0.0059,0.0012},
			[221]={0.0063,0.0012},
			[222]={0.0067,0.0015},
			[223]={0.0072,0.0016},
			[224]={0.0075,0.0017},
			[225]={0.0079,0.0019},
			[226]={0.0085,0.002},
			[227]={0.009,0.002},
			[228]={0.0096,0.0023},
			[229]={0.0102,0.0025},
			[230]={0.0108,0.0026},
			[231]={0.0116,0.0029},
			[232]={0.0128,0.0032},
			[233]={0.013,0.0031},
			[234]={0.0135,0.0028},
			[235]={0.0141,0.0027},
			[236]={0.0147,0.0023},
			[237]={0.0151,0.0023},
			[238]={0.0156,0.002},
			[239]={0.016,0.0019},
			[240]={0.0162,0.0015},
			[241]={0.0166,0.0015},
			[242]={0.017,0.0012},
			[243]={0.0172,0.0008},
			[244]={0.0176,0.0003},
			[245]={0.0179,0.0002},
			[246]={0.018,-0.0005},
			[247]={0.0181,-0.0009},
			[248]={0.0185,-0.0011},
			[249]={0.0187,-0.0019},
			[250]={0.019,-0.0021},
			[251]={0.0192,-0.0027},
			[252]={0.0193,-0.003},
			[253]={0.0197,-0.004},
			[254]={0.0095,-0.0046},
			[255]={0.0224,-0.0097},
		};
	#endif
#endif
	
#ifndef	xy_shift_defined
		static const xy_shift_t xy_shift[ColourContrUpperLimit];
#endif











typedef union
{
    struct
    {
        uint8_t   Contr	  			: 1;	//控制
		uint8_t   ModeContr	    	: 5;	//模式控制
		uint8_t   ColourCtr1Flg		: 1;    //颜色1标志位
        uint8_t   ColourCtr2Flg		: 1;    //颜色2标志位
		
		uint8_t   ColourContr1	  	: 8;	//颜色1控制
		
		uint8_t   ColourContr2	  	: 8;	//颜色2控制
		
		uint8_t   DimLevel	  		: 7;	//亮度控制
        uint8_t   Flag	  			: 1;	//标志位
		
		uint8_t   Conter	  		: 8;	//同步计数
		
		uint8_t   TimeContr	  		: 6;	//效果时间控制
		uint8_t   Reserve2	  		: 2;
		
		uint8_t   FrecyContr	  	: 6;	//次数控制
		uint8_t   Reserve3	  		: 2;
		
		uint8_t   RegContr	  		: 4;	//方向控制
		uint8_t   Reserve4	  		: 4;
    }matrix;
    
	uint8_t data[LIN_BUFF_SIZE];
    
}BCM_ALU_CTRL;

typedef enum{
    Mode1  = 0x01,		//常亮
	Mode2  = 0x02,		//呼吸
    Mode3  = 0x03,		//闪烁
	Mode4  = 0x04,		//多色渐变
	Mode5  = 0x05,		//流水
	Mode6  = 0x06,      //流光
    Mode7  = 0x07,      //流星
	Mode8  = 0x08,      //语音唤醒
	Mode9  = 0x09,      //语音识别
	Mode10  = 0x0A,     //TTS播报
    Mode11  = 0x0B,     //炫彩流水
	Mode12  = 0x0C,     //无序点光
	Mode13  = 0x0D,     //虚线平移流水
	Mode14  = 0x0E,     //虚线游动
    Mode15  = 0x0F,     //虚线依次点亮
	Mode16  = 0x10,     //踏步平移
}ModeControl_t;

typedef enum{
    CMD_COLOR_CTRL_XYY  = 0x00,
    CMD_COLOR_CTRL_HSL  = 0x01,
    CMD_COLOR_CTRL_RGBL = 0x02,
    CMD_COLOR_CTRL_RGB  = 0x03,
    CMD_COLOR_CTRL_PWM  = 0x04,
    CMD_COLOR_CTRL_LUV  = 0x05,
    CMD_COLOR_CTRL_XYY_EXT  = 0x06,
    CMD_COLOR_CTRL_XY_ABS_Y    = 0x07,
    CMD_COLOR_CTRL_ABS_L_UV    = 0x08,
    CMD_COLOR_CTRL_sRGB_ABS_L  = 0x09,
}ColorCtrlCommand_t;


typedef union{
    struct{
        uint8_t nodeAddress;
        uint8_t channel         :4;
        uint8_t command         :4;
    };
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t x;
        uint16_t y;
        uint8_t  Y;
        uint8_t transitionTime;/* 100ms/count */
    }ColorXY;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t hue;
        uint8_t  saturation;
        uint8_t  level;
        uint8_t  transitionTime;/* 100ms/count */
    }ColorHSL;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint8_t  red;
        uint8_t  green;
        uint8_t  blue;
        uint8_t  level;
        uint8_t  transitionTime;/* 100ms/count */
    }ColorRGBL;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint8_t  red;
        uint8_t  green;
        uint8_t  blue;
        uint8_t  transitionTime;/* 100ms/count */
    }ColorRGB;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint8_t  red;
        uint8_t  green;
        uint8_t  blue;
        uint8_t transitionTime;/* 100ms/count */
    }ColorPWM;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t u;
        uint16_t v;
        uint8_t  level;
        uint8_t  transitionTime;/* 100ms/count */
    }ColorLUV;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t x;
        uint16_t y;
        uint16_t Y;
    }ColorXY_EXT;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t x;
        uint16_t y;
        uint16_t intensity;
    }ColorXY_Intensity;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint16_t u;
        uint16_t v;
        uint16_t intensity;
    }ColorIntensity_UV;
    struct{
        uint8_t  nodeAddress;
        uint8_t  channel         :4;
        uint8_t  command         :4;
        uint8_t  red;
        uint8_t  green;
        uint8_t  blue;
        uint8_t  reserved;
        uint16_t intensity;
    }ColorSRGB_Intensity;
    
    uint8_t  data[LIN_BUFF_SIZE];       /*!< data buffer. */
}ColorCtrlFrame_t;


#define APP_DIAG_GET_LED_PHY_PARAM       (0x00U)
#define APP_DIAG_SET_LED_PHY_PARAM       (0x01U)
#define APP_DIAG_GET_LED_GENERAL_PARAM   (0x02U)
#define APP_DIAG_SET_LED_GENERAL_PARAM   (0x03U)
#define APP_DIAG_GET_LED_TYPICAL_PN_VOLT (0x04U)
#define APP_DIAG_SET_LED_TYPICAL_PN_VOLT (0x05U)
#define APP_DIAG_GET_LED_RUN_TIME_INFO   (0x06U)
#define APP_DIAG_GET_LED_STATIC_PN_VOLT  (0x07U)
#define APP_DIAG_GET_LED_RGB_RUN_TEMP    (0x08U)
#define APP_DIAG_GET_LED_RGB_RUN_VOLT    (0x09U)

#define APP_DIAG_GET_SDK_VERSION         (0x0FU)

BEGIN_PACK

typedef struct{
  LedNum_t         ledIndex;
  int8_t           temperature[3];
  LedcolorParam_t  colorParam;
}CommLedPhysicalParam_t;

typedef struct{
  LedNum_t         ledIndex;
  int8_t           temperature;
  int16_t          ledTypicalPNVolt[3];   /* @25C*/
}CommLedTypicalPNVolt_t;

typedef struct{
  Coordinate_t     whitePoint;
  uint16_t         minIntensity[3];       /* size: 6bytes min rgb Intensity, red has more degration */
}CommLedGeneralParam_t;

typedef struct{
  uint16_t battVolt;
  uint16_t buckVolt;
  int16_t  chipTemp; 
  uint16_t ledNum;
  int16_t  ledTemperature[LED_NUM];
}CommLedRunTimeParam_t;

typedef struct{
  LedNum_t         ledIndex;
  uint8_t          reserved;
  uint16_t         ledPNVolt[3];
}CommLedStaticPNVolt_t;

typedef struct{
  LedNum_t         ledIndex;
  uint8_t          reserved;
  uint16_t         ledPNVolt[3];
  uint16_t battVolt;
  uint16_t resvd;
  int16_t  chipTemp;
}CommLedRunTimePNVolt_t;

typedef struct{
  LedNum_t         ledIndex;
  uint8_t          reserved;
  int8_t           ledTemp[3];
}CommLedRunTimePNTemp_t;

typedef struct{
  uint16_t              sdkApplication;
  lin_stack_version_t   linStack;
  LibVersionInfo_t      ledLibrary;
}CommVersion_t;

typedef struct{
  uint16_t command;
  union{
      CommLedPhysicalParam_t    ledPhysicalParam;
      CommLedTypicalPNVolt_t    ledTypicalPNVolt;
      CommLedGeneralParam_t     ledGeneralParam;
      CommLedRunTimeParam_t     ledRunTimeParam;
      CommLedStaticPNVolt_t     ledStaticPNVolt;
      CommLedRunTimePNVolt_t    ledRunTimePNVolt;
      CommLedRunTimePNTemp_t    LedRunTimePNTemp;
      CommVersion_t             Version;
  };
}CommLedParamInfo_t;

END_PACK


uint8_t APPL_GetLEDState(void);

void APPL_TaskHandler(void);
void APPL_HandleColorControlCommands(LIN_Device_Frame_t const *frame);
/* Response enable  */
uint8_t APPL_PrepareLedParamRequest(uint8_t reqSid,uint8_t *const dataBuff, DiagRspInfo_t *const diagRsp);
uint8_t APPL_HandleLedParamConfigRequest(uint8_t reqSid,uint8_t *const dataBuff,DiagRspInfo_t *const diagRsp);
void APPL_HandleBcmControlCommands(LIN_Device_Frame_t const *frame);
static void Led_InitParam(void);
void BcmControlCommandsDataHandle();
void SyncJudge();
void LedOnPorcess(uint8_t ColorIndex, uint16_t Brightness, uint16_t transitionTime);
uint8_t ColorIndexCalculate(uint8_t ColourContr);
uint16_t BrightnessCalculate(uint8_t DimLevel);
uint16_t ModePeriodCalculate(uint8_t TimeContr);
uint8_t ModeTimeCalculate(uint8_t FrecyContr);
void ModeParamInit();
void APPL_HandleChangeFID(LIN_Device_Frame_t const *frame);

#endif
